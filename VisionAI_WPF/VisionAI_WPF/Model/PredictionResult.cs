// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

namespace Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PredictionResult
    {
        [JsonProperty("created")]
        public DateTimeOffset Created { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("iteration")]
        public string Iteration { get; set; }

        [JsonProperty("predictions")]
        public Prediction[] Predictions { get; set; }

        [JsonProperty("project")]
        public string Project { get; set; }
    }

    public partial class Prediction
    {
        [JsonProperty("boundingBox")]
        public BoundingBox BoundingBox { get; set; }

        [JsonProperty("probability")]
        public double Probability { get; set; }

        [JsonProperty("tagId")]
        public long TagId { get; set; }

        [JsonProperty("tagName")]
        public string TagName { get; set; }
    }

    public partial class BoundingBox
    {
        [JsonProperty("height")]
        public double Height { get; set; }

        [JsonProperty("left")]
        public double Left { get; set; }

        [JsonProperty("top")]
        public double Top { get; set; }

        [JsonProperty("width")]
        public double Width { get; set; }
    }

    public partial class PredictionResult
    {
        public static PredictionResult FromJson(string json) => JsonConvert.DeserializeObject<PredictionResult>(json, Model.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PredictionResult self) => JsonConvert.SerializeObject(self, Model.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
